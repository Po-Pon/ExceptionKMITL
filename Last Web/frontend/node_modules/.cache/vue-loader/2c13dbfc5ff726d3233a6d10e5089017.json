{"remainingRequest":"C:\\Users\\phala\\Documents\\GitHub\\ExceptionKMITL\\Last Web\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\phala\\Documents\\GitHub\\ExceptionKMITL\\Last Web\\frontend\\src\\views\\register.vue?vue&type=template&id=77453986&scoped=true&","dependencies":[{"path":"C:\\Users\\phala\\Documents\\GitHub\\ExceptionKMITL\\Last Web\\frontend\\src\\views\\register.vue","mtime":1618479760815},{"path":"C:\\Users\\phala\\Documents\\GitHub\\ExceptionKMITL\\Last Web\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\phala\\Documents\\GitHub\\ExceptionKMITL\\Last Web\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\phala\\Documents\\GitHub\\ExceptionKMITL\\Last Web\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\phala\\Documents\\GitHub\\ExceptionKMITL\\Last Web\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}